import 'reflect-metadata'; // QUAN TR·ªåNG: Ph·∫£i l√† import ƒë·∫ßu ti√™n
import './container'; // Kh·ªüi t·∫°o IoC container
import { container } from 'tsyringe';
import { initLoaders } from './loaders';
import { LoggingService } from './services/logging.service';
import { Logger } from 'pino';
import { ConfigService } from './config/config.service';
import http from 'http';
import mongoose from 'mongoose';

/**
 * Logger to√†n c·ª•c c·ªßa ·ª©ng d·ª•ng.
 * ƒê∆∞·ª£c kh·ªüi t·∫°o sau khi LoggingService s·∫µn s√†ng.
 */
let logger: Logger;

/**
 * Instance c·ªßa LoggingService.
 * Cung c·∫•p quy·ªÅn truy c·∫≠p v√†o c√°c ch·ª©c nƒÉng logging v√† ƒë√≥ng stream.
 */
let loggingService: LoggingService;

/**
 * Instance c·ªßa ConfigService.
 * Cung c·∫•p quy·ªÅn truy c·∫≠p v√†o t·∫•t c·∫£ c·∫•u h√¨nh ·ª©ng d·ª•ng.
 */
let configService: ConfigService;

/**
 * Instance c·ªßa HTTP server.
 * Cho ph√©p t·∫Øt server m·ªôt c√°ch an to√†n.
 */
let httpServer: http.Server;

/**
 * C·ªù ƒë·ªÉ ngƒÉn ch·∫∑n vi·ªác g·ªçi shutdown nhi·ªÅu l·∫ßn.
 */
let isShuttingDown = false;

/**
 * H√†m ch√≠nh ƒë·ªÉ kh·ªüi ƒë·ªông server ·ª©ng d·ª•ng.
 */
async function startServer(): Promise<void> {
    try {
        // --- 1. Kh·ªüi t·∫°o c√°c Service C·ªët l√µi (Config v√† Logging ph·∫£i ƒëi tr∆∞·ªõc) ---
        configService = container.resolve(ConfigService);
        loggingService = container.resolve(LoggingService); // G√°n v√†o bi·∫øn to√†n c·ª•c

        try {
            await loggingService.initialize();
            logger = loggingService.getLogger('app'); // G√°n logger to√†n c·ª•c ngay sau khi init
        } catch (error) {
            console.error("FATAL: Kh√¥ng th·ªÉ kh·ªüi t·∫°o logging service. ƒêang tho√°t.", error);
            process.exit(1);
        }

        // --- 2. Kh·ªüi t·∫°o c√°c v√≠ d·ª• API t·ª´ ConfigService ---
        try {
            await configService.initializeExamples();
        } catch (exampleError: any) {
            const errorMessage = exampleError instanceof Error ? exampleError.message : String(exampleError);
            const errorStack = exampleError instanceof Error ? exampleError.stack : undefined;
            logger.error(`[Server Start] TH·∫§T B·∫†I khi kh·ªüi t·∫°o v√≠ d·ª• API: ${errorMessage}`, { stack: errorStack });
            throw new Error(`L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ t·∫£i c√°c v√≠ d·ª• API c·∫ßn thi·∫øt. Server kh√¥ng th·ªÉ ti·∫øp t·ª•c.`);
        }

        // --- 3. Kh·ªüi t·∫°o c√°c Loaders (Database, Express, Socket.IO, Cron Jobs, etc.) ---
        const loaderResult = await initLoaders();
        httpServer = loaderResult.httpServer;

        // --- 4. B·∫Øt ƒë·∫ßu l·∫Øng nghe tr√™n HTTP Server ---
        const port = configService.port;
        httpServer.listen(port, () => {
            const serverUrl = `http://localhost:${port}`;
            const allowedOrigins = configService.corsAllowedOrigins.join(', ');
            console.log(`üöÄ Server s·∫µn s√†ng t·∫°i ${serverUrl}`);
        });

    } catch (error: any) {
        // B·∫Øt c√°c l·ªói trong qu√° tr√¨nh kh·ªüi ƒë·ªông ban ƒë·∫ßu.
        const currentLogger = logger || console;
        const errorMessage = error instanceof Error ? error.message : String(error);
        const errorStack = error instanceof Error ? error.stack : undefined;

        currentLogger.fatal(`[Server Start] L·ªñI NGHI√äM TR·ªåNG trong qu√° tr√¨nh kh·ªüi t·∫°o ·ª©ng d·ª•ng: ${errorMessage}`, { stack: errorStack });

        if (!isShuttingDown) {
            await gracefulShutdown('Initialization Error', error);
        } else {
            process.exit(1);
        }
    }
}

/**
 * B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫Øt ·ª©ng d·ª•ng m·ªôt c√°ch an to√†n.
 * @param {string} signal - T√≠n hi·ªáu g√¢y ra vi·ªác t·∫Øt (v√≠ d·ª•: 'SIGINT', 'uncaughtException').
 * @param {Error | unknown} [error] - L·ªói (n·∫øu c√≥) g√¢y ra vi·ªác t·∫Øt.
 */
async function gracefulShutdown(signal: string, error?: Error | unknown): Promise<void> {
    const reason = error ? `l·ªói (${error instanceof Error ? error.message : String(error)})` : `t√≠n hi·ªáu (${signal})`;

    if (isShuttingDown) {
        logger?.warn(`[Shutdown] ƒê√£ ·ªü trong qu√° tr√¨nh t·∫Øt (g√¢y ra b·ªüi ${reason}). B·ªè qua trigger ti·∫øp theo (${signal}).`);
        return;
    }
    isShuttingDown = true;

    let exitCode = error ? 1 : 0;
    const currentLogger = logger || console;
    currentLogger.info(`[Shutdown] Nh·∫≠n ƒë∆∞·ª£c ${reason}. B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫Øt an to√†n...`);

    const shutdownTimeoutMs = 15000;
    const shutdownTimeout = setTimeout(() => {
        currentLogger.error(`[Shutdown] Qu√° tr√¨nh t·∫Øt an to√†n v∆∞·ª£t qu√° ${shutdownTimeoutMs}ms. Bu·ªôc tho√°t ·ª©ng d·ª•ng.`);
        loggingService?.flushLogsAndClose(); // C·ªë g·∫Øng flush l·∫ßn cu·ªëi
        process.exit(1);
    }, shutdownTimeoutMs);

    try {
        // --- B∆∞·ªõc 1: ƒê√≥ng HTTP Server ---
        if (httpServer && httpServer.listening) {
            currentLogger.info('[Shutdown] ƒêang ƒë√≥ng HTTP server...');
            await new Promise<void>((resolve) => {
                httpServer.close((err) => {
                    if (err) {
                        currentLogger.error('[Shutdown] L·ªói khi ƒë√≥ng HTTP server:', err);
                    } else {
                        currentLogger.info('[Shutdown] HTTP server ƒë√£ ƒë√≥ng th√†nh c√¥ng.');
                    }
                    resolve();
                });
            });
        } else {
            currentLogger.info('[Shutdown] HTTP server kh√¥ng ho·∫°t ƒë·ªông. B·ªè qua vi·ªác ƒë√≥ng.');
        }

        // --- B∆∞·ªõc 2: ƒê√≥ng k·∫øt n·ªëi Database (MongoDB) ---
        try {
            if (mongoose.connection && mongoose.connection.readyState === 1) {
                currentLogger.info('[Shutdown] ƒêang ƒë√≥ng k·∫øt n·ªëi MongoDB...');
                await mongoose.connection.close();
                currentLogger.info('[Shutdown] K·∫øt n·ªëi MongoDB ƒë√£ ƒë√≥ng th√†nh c√¥ng.');
            } else {
                currentLogger.info('[Shutdown] K·∫øt n·ªëi MongoDB kh√¥ng ho·∫°t ƒë·ªông. B·ªè qua vi·ªác ƒë√≥ng.');
            }
        } catch (dbErr: any) {
            currentLogger.error('[Shutdown] L·ªói khi ƒë√≥ng k·∫øt n·ªëi MongoDB:', dbErr);
            exitCode = 1;
        }

        // --- B∆∞·ªõc 3: Th√™m c√°c t√°c v·ª• d·ªçn d·∫πp kh√°c t·∫°i ƒë√¢y ---
        currentLogger.info('[Shutdown] ƒêang th·ª±c thi c√°c t√°c v·ª• d·ªçn d·∫πp b·ªï sung...');
        // await someOtherCleanupFunction();
        currentLogger.info('[Shutdown] C√°c t√°c v·ª• d·ªçn d·∫πp b·ªï sung ƒë√£ ho√†n t·∫•t.');

    } catch (cleanupError: any) {
        currentLogger.error('[Shutdown] L·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh d·ªçn d·∫πp:', cleanupError);
        exitCode = 1;
    } finally {
        // --- B∆∞·ªõc cu·ªëi: Flush logs v√† tho√°t ti·∫øn tr√¨nh ---
        currentLogger.info('[Shutdown] ƒêang th·ª±c hi·ªán flush log l·∫ßn cu·ªëi...');
        if (loggingService) {
            await loggingService.flushLogsAndClose();
            // Kh√¥ng log sau d√≤ng n√†y v√¨ stream ƒë√£ ƒë√≥ng
            console.log('[Shutdown] Logs ƒë√£ ƒë∆∞·ª£c flush v√† c√°c transport ƒë√£ ƒë√≥ng.');
        } else {
            console.error("[Shutdown] Logging service kh√¥ng kh·∫£ d·ª•ng ƒë·ªÉ flush l·∫ßn cu·ªëi. Logs c√≥ th·ªÉ kh√¥ng ƒë·∫ßy ƒë·ªß.");
        }

        clearTimeout(shutdownTimeout);
        console.log(`[Shutdown] Qu√° tr√¨nh t·∫Øt an to√†n ƒë√£ ho√†n t·∫•t. Tho√°t ·ª©ng d·ª•ng v·ªõi m√£ ${exitCode}.`);

        // Tho√°t ti·∫øn tr√¨nh Node.js.
        process.exit(exitCode);
    }
}

// --- ƒêƒÉng k√Ω c√°c tr√¨nh l·∫Øng nghe s·ª± ki·ªán ƒë·ªÉ t·∫Øt an to√†n ---
const shutdownSignals: NodeJS.Signals[] = ['SIGINT', 'SIGTERM'];

shutdownSignals.forEach((signal) => {
    process.on(signal, () => {
        logger?.info(`[Process Event] Nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu: ${signal}`);
        gracefulShutdown(signal);
    });
});

/**
 * X·ª≠ l√Ω c√°c exception kh√¥ng ƒë∆∞·ª£c b·∫Øt.
 */
process.on('uncaughtException', (err: Error, origin: string) => {
    const currentLogger = logger || console;
    currentLogger.fatal({ err: { message: err.message, stack: err.stack, name: err.name }, origin }, 'Ph√°t hi·ªán Uncaught Exception. B·∫Øt ƒë·∫ßu t·∫Øt kh·∫©n c·∫•p.');
    if (!isShuttingDown) {
        gracefulShutdown('uncaughtException', err);
    } else {
        currentLogger.warn('[Shutdown] Uncaught exception x·∫£y ra trong qu√° tr√¨nh ƒëang t·∫Øt. Bu·ªôc tho√°t ngay l·∫≠p t·ª©c.');
        process.exit(1);
    }
});

/**
 * X·ª≠ l√Ω c√°c promise rejection kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω.
 */
process.on('unhandledRejection', (reason: unknown, promise: Promise<any>) => {
    const currentLogger = logger || console;
    const error = reason instanceof Error ? reason : new Error(String(reason ?? 'L√Ω do unhandled rejection kh√¥ng x√°c ƒë·ªãnh'));
    currentLogger.fatal({ err: { message: error.message, stack: error.stack, name: error.name }, reason }, 'Ph√°t hi·ªán Unhandled Promise Rejection. B·∫Øt ƒë·∫ßu t·∫Øt kh·∫©n c·∫•p.');
    if (!isShuttingDown) {
        gracefulShutdown('unhandledRejection', error);
    } else {
        currentLogger.warn('[Shutdown] Unhandled rejection x·∫£y ra trong qu√° tr√¨nh ƒëang t·∫Øt. Bu·ªôc tho√°t ngay l·∫≠p t·ª©c.');
        process.exit(1);
    }
});

// --- B·∫Øt ƒë·∫ßu ·ª©ng d·ª•ng ---
startServer();