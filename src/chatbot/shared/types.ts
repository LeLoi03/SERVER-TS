// src/chatbot/shared/types.ts

import { FunctionCall, Part } from "@google/generative-ai"; // SDK types
import { Socket } from "socket.io";

// --- Basic Types ---

/** Represents supported languages for the application. */
export type Language = 'en' | 'vi' | 'zh'; // Add more as needed

/** Represents the available prebuilt voices for text-to-speech. */
export type PrebuiltVoice = "Puck" | "Charon" | "Kore" | "Fenrir" | "Aoede" | "Orus" | "Zephyr";

/** Defines the possible output modalities (text, audio, image). */
export type OutputModality = "text" | "audio" | "image";

/** Defines the chat interaction mode (live streaming vs. regular request/response). */
export type ChatMode = 'live' | 'regular';

/** Defines the structure for a language option displayed to the user. */
export interface LanguageOption {
    code: Language;
    name: string;
    flagCode: string; // e.g., 'gb', 'vn', 'cn' for flag icons
}

/** Defines the structure for a single item in the conversation history. */
export interface HistoryItem {
    /** The role of the entity that produced this part of the conversation. */
    role: "user" | "model" | "function"; // 'function' role represents the *result* returned to the model
    /** The content parts, directly using the Google AI SDK's Part type. */
    parts: Part[];
    /** Optional ISO timestamp indicating when the item was added. */
    timestamp?: string;
}

// --- API & Service Result Types ---

/** Represents the result of an internal API call (e.g., to the backend service). */
export interface ApiCallResult {
    /** Indicates whether the API call was successful in retrieving and processing data. */
    success: boolean;
    /** The raw string data received from the API (may be JSON, error text, etc.). Null if no response obtained. */
    rawData: string | null;
    /** Optional formatted string data after transformation (null if not applicable or failed). */
    formattedData: string | null;
    /** Optional error message describing issues during the call, parsing, or transformation. */
    errorMessage?: string;
}

/** Represents the structure of a followed item retrieved from the backend. */
export interface FollowItem {
    /** The unique ID of the followed conference or journal. */
    id: string;
    // Add other relevant fields returned by the API (e.g., title, acronym) if needed later.
    // title?: string;
    // acronym?: string;
}

// --- Gemini Model Interaction ---

/** Defines the possible outcomes of a single interaction turn with the Gemini model. */
export interface GeminiInteractionResult {
    /** The status indicating the outcome of the generation attempt. */
    status: "requires_function_call" | "final_text" | "error";
    /** The function call requested by the model (present if status is 'requires_function_call'). */
    functionCall?: FunctionCall;
    /** The final text response generated by the model (present if status is 'final_text'). */
    text?: string;
    /** An error message if the generation failed (present if status is 'error'). */
    errorMessage?: string;
}

// --- Frontend Interaction & Updates ---

/** Defines the types of actions the backend can request the frontend to perform. */
export type FrontendAction =
    | { type: 'navigate'; url: string }
    | { type: 'openMap'; location: string }
    | { type: 'confirmEmailSend'; payload: ConfirmSendEmailAction } // Payload defined below
    | { type: 'addToCalendar'; payload: ItemInfo }
    | { type: 'removeFromCalendar'; payload: ItemInfo }

    | undefined; // Allows for no action


/** Defines the payload for the 'confirmEmailSend' frontend action. */
export interface ConfirmSendEmailAction {
    /** A unique identifier for this specific confirmation request. */
    confirmationId: string;
    /** The email subject line. */
    subject: string;
    /** The type of email request (e.g., for contact or reporting). */
    requestType: 'contact' | 'report'; // Use specific types if known
    /** The main body/message of the email. */
    message: string;
    /** The duration (in milliseconds) the confirmation dialog should wait for user input. */
    timeoutMs: number;
}

export interface ItemInfo {
    /** A unique identifier for this specific confirmation request. */
    itemId: string;
    /** The email subject line. */
    subject: string;
    /** The type of email request (e.g., for contact or reporting). */
    requestType: 'contact' | 'report'; // Use specific types if known
    /** The main body/message of the email. */
    message: string;
    /** The duration (in milliseconds) the confirmation dialog should wait for user input. */
    timeoutMs: number;
}

/** Represents a single step in the backend's thought process during a request. */
export interface ThoughtStep {
    /** An identifier for the stage (e.g., 'receiving_input', 'calling_gemini', 'executing_function'). */
    step: string;
    /** A human-readable description of the step being performed. */
    message: string;
    /** ISO timestamp when the step occurred. */
    timestamp: string;
    /** Optional: Additional details relevant to the step (e.g., function arguments, API endpoint). */
    details?: any;

    agentId?: string;
}

export type AgentId = 'HostAgent' | 'ConferenceAgent' | 'JournalAgent' | 'AdminContactAgent' | 'NavigationAgent' | 'WebsiteInfoAgent' | string; // Allow string for flexibility if needed

/** Represents a status update sent to the frontend during processing. */
export interface StatusUpdate {
    type: 'status';
    /** Identifier for the current processing stage. */
    step: string;
    /** User-friendly message describing the current status. */
    message: string;
    /** Optional details relevant to this specific status update. */
    details?: any;
    /** Optional: The accumulated thought process steps up to this point. */
    thoughts?: ThoughtStep[];
    /** Optional but recommended: ISO timestamp of the update. */
    timestamp?: string;
    agentId?: AgentId; // <<< THÊM DÒNG NÀY

}

/** Represents a chunk of text sent during streaming responses. */
export interface ChatUpdate {
    type: 'partial_result';
    /** The piece of text generated in this chunk. */
    textChunk: string;
}

/** Represents the final result of a chat interaction turn sent to the frontend. */
export interface ResultUpdate {
    type: 'result';
    /** The complete final text message to display to the user. */
    message: string;
    /** Optional: The complete thought process for this interaction turn. */
    thoughts?: ThoughtStep[];
    /** Optional: An action for the frontend to perform alongside displaying the message. */
    action?: FrontendAction;
}

/** Represents an error update sent to the frontend. */
export interface ErrorUpdate {
    type: 'error'; // Luôn là 'error' để phân biệt với các update khác
    message: string;
    step?: string; // Bước mà lỗi có thể đã xảy ra (ví dụ: 'tool_execution', 'final_formatting')
    // thought?: string; // Bỏ đi nếu thoughts đã bao gồm thông tin này
    thoughts?: ThoughtStep[]; // Lịch sử quá trình suy nghĩ dẫn đến lỗi
    code?: string; // Mã lỗi cụ thể từ server (ví dụ: 'CONVERSATION_NOT_FOUND', 'AUTH_REQUIRED')
    details?: any; // Thông tin chi tiết thêm về lỗi
}


//   // Ví dụ payload cho event 'chat_error' từ server
// {
//     "type": "error",
//     "message": "Conversation with ID 'xyz123' not found.",
//     "step": "load_conversation_db_query",
//     "code": "CONVERSATION_NOT_FOUND",
//     "details": { "conversationId": "xyz123" },
//     "thoughts": [
//       { "level": 0, "thought": "User requested to load conversation 'xyz123'." },
//       { "level": 1, "thought": "Querying database for conversation 'xyz123'." },
//       { "level": 2, "thought": "Database query returned no results." }
//     ]
//   }


//   // Ví dụ payload cho event 'chat_error' từ server (lỗi nghiêm trọng)
// {
//     "type": "error",
//     "message": "Authentication token is invalid or expired.",
//     "code": "AUTH_REQUIRED",
//     "details": { "reason": "token_expired" }
//   }

/** Represents an warning update sent to the frontend. */
export interface WarningUpdate {
    type: 'warning';
    /** The warning message to display to the user. */
    message: string;
    /** Optional: The processing step where the warning occurred. */
    step?: string;
    /** Optional: The complete thought process leading up to the warning. */
    thoughts?: ThoughtStep[];
}


/** Defines the possible types for a message displayed in the chat UI. */
export type ChatDisplayMessageType = 'text' | 'error' | 'warning' | 'map' | undefined;

/** Represents a single message object used for rendering the chat history in the UI. */
export interface ChatMessage {
    /** A unique identifier for the message (e.g., generated by UUID). */
    id: string;
    /** The primary text content of the message (can be label for map). */
    message: string;
    /** Flag indicating if the message originated from the user. */
    isUser: boolean;
    /** The display type of the message (text, map, error, etc.). */
    type: ChatDisplayMessageType;
    /** Optional: Accumulated thought steps associated with this message generation. */
    thoughts?: ThoughtStep[];
    /** Optional: Location string used if the message type is 'map'. */
    location?: string;
    /** Optional: Timestamp when the message was created/received. */
    timestamp?: string | Date; // Allow Date object as well
}

/** Payload informing the frontend about the result of a user confirmation action (e.g., email send). */
export interface ConfirmationResultPayload {
    /** The ID matching the original `ConfirmSendEmailAction` request. */
    confirmationId: string;
    /** The outcome status of the confirmation process. */
    status:
    | 'confirmed' // User clicked confirm, backend action succeeded (or attempted)
    | 'cancelled' // User clicked cancel/dismiss
    | 'timeout'   // Confirmation window expired
    | 'not_found' // Backend couldn't find a pending confirmation with this ID
    | 'failed'    // User confirmed, but subsequent backend action failed (e.g., sending email)
    | 'unauthorized' // Attempt to confirm/cancel by wrong user/session
    | 'error';    // Internal server error during confirmation processing
    /** A user-friendly message summarizing the outcome. */
    message: string;
    /** Optional: Additional details, especially for 'failed' or 'error' statuses. */
    details?: any;
}

// --- Agent Communication Protocol (Example V1) ---

/** Represents a request sent between agents (e.g., Host to ConferenceAgent). */
export interface AgentCardRequest {
    /** Unique ID for this specific task request. */
    taskId: string;
    /** ID of the overarching conversation. */
    conversationId: string;
    /** ID of the agent sending the request ('HostAgent' or another agent's ID). */
    senderAgentId: 'HostAgent' | string;
    /** ID of the agent designated to handle the request. */
    receiverAgentId: string;
    /** ISO timestamp of when the request was created. */
    timestamp: string;
    /** Natural language description of the task for the receiving agent. */
    taskDescription: string;
    /** Optional context to provide the receiving agent. */
    context?: {
        history?: HistoryItem[]; // e.g., last few messages
        userToken?: string | null;
        language?: Language;
    };
}

/** Represents a response sent back from a receiving agent to the sender. */
export interface AgentCardResponse {
    /** The ID of the original task request this response corresponds to. */
    taskId: string;
    /** ID of the overarching conversation. */
    conversationId: string;
    /** ID of the agent sending this response. */
    senderAgentId: string;
    /** ID of the intended recipient of the response ('HostAgent' or another agent). */
    receiverAgentId: 'HostAgent' | string;
    /** ISO timestamp of when the response was created. */
    timestamp: string;
    /** The status indicating the outcome of the task processing. */
    status: 'success' | 'error' | 'in_progress';
    /** Optional data containing the result of the task (e.g., JSON string, text summary). */
    resultData?: any;
    /** Optional error message if the status is 'error'. */
    errorMessage?: string;
    /** Optional action requested by the sub-agent for the frontend to perform. */
    frontendAction?: FrontendAction;

    thoughts?: ThoughtStep[]; // <<< THÊM DÒNG NÀY

}


// --- Socket Event Data Payloads --- <<< THÊM SECTION NÀY VÀ CÁC TYPE BÊN DƯỚI

/** Data structure expected when the client sends a message. */
export interface SendMessageData {
    /** The text input from the user. */
    userInput: string;
    /** Flag indicating if the response should be streamed (defaults to true if omitted). */
    isStreaming?: boolean;
    /** The language context for the message. */
    language: Language;
    /** Conversation id */
    conversationId?: string | null; // Client sẽ gửi cái này

}

/** Data structure expected when the client requests to load a specific conversation. */
export interface LoadConversationData {
    /** The unique ID of the conversation to load. */
    conversationId: string;
}

/** Data structure expected for email confirmation/cancellation events from the client. */
export interface ConfirmationEventData {
    /** The unique ID of the confirmation process being responded to. */
    confirmationId: string;
}

/** Data structure expected when the client requests to delete a conversation. */
export interface DeleteConversationData {
    /** The unique ID of the conversation to delete. */
    conversationId: string;
}

/** Data structure expected when the client requests to clear messages from a conversation. */
export interface ClearConversationData {
    /** The unique ID of the conversation whose messages should be cleared. */
    conversationId: string;
}

export interface RenameConversationData {
    conversationId: string;
    newTitle: string;
}

export interface RenameResult {
    success: boolean;
    updatedTitle?: string; // Tiêu đề đã được chuẩn hóa và lưu
    conversationId?: string;
}

export interface PinConversationData {
    conversationId: string;
    isPinned: boolean;
}

export interface SearchConversationsData {
    searchTerm: string;
    limit?: number; // Tùy chọn, client có thể yêu cầu số lượng kết quả
}

// --- Metadata cho danh sách cuộc trò chuyện (để đảm bảo đồng bộ với service) ---
// Bạn có thể import trực tiếp từ service nếu cấu trúc module cho phép,
// hoặc định nghĩa lại ở đây để frontend sử dụng.
export interface ClientConversationMetadata {
    id: string;
    title: string;
    lastActivity: Date; // Hoặc string nếu bạn parse ở client
    isPinned: boolean;
}

export interface NewConversationResult {
    conversationId: string;
    history: HistoryItem[];
    title: string; // Thêm title
    lastActivity: Date; // Thêm lastActivity
    isPinned: boolean; // Thêm isPinned
}




// --- Constants ---

/** List of available language options for UI selection. */
export const AVAILABLE_LANGUAGES: LanguageOption[] = [
    { code: 'en', name: 'English', flagCode: 'gb' },
    { code: 'vi', name: 'Tiếng Việt', flagCode: 'vn' },
    { code: 'zh', name: '中文', flagCode: 'cn' },
];

/** Default language used if none is specified or detected. */
export const DEFAULT_LANGUAGE: Language = 'vi';
/** Default voice used for text-to-speech. */
export const DEFAULT_VOICE: PrebuiltVoice = 'Puck';
/** Default output modality. */
export const DEFAULT_MODALITY: OutputModality = 'audio';

// --- Gemini types ---

/**
 * Input context provided to each function handler during execution.
 * Contains all necessary data and callbacks for the handler's operation.
 */
export interface FunctionHandlerInput {
    /** Arguments provided by the LLM for the function call. Structure varies per function. */
    args: Record<string, any>; // Use Record<string, any> or a more specific union if possible

    /** Authentication token for the user associated with the request, if available. */
    userToken: string | null;

    /** The current language setting for the interaction (e.g., 'en', 'vi'). */
    language: Language;

    /** A unique identifier for this specific function execution instance (can trace back to parent process). */
    handlerId: string;

    /** The unique ID of the client's socket connection. */
    socketId: string;

    /**
     * Callback function to send status updates back to the central orchestrator (e.g., intentHandler).
     * Should return `true` if the update was likely sent successfully, `false` if the underlying connection is likely closed.
     * @param eventName - Should always be 'status_update'.
     * @param data - The StatusUpdate payload.
     * @returns Boolean indicating likely success of sending the update.
     */
    onStatusUpdate: (eventName: 'status_update', data: StatusUpdate) => boolean;

    /** The raw Socket.IO client socket instance. Use with caution, prefer onStatusUpdate. */
    socket: Socket;

    /** Optional: The name of the function being executed, passed down from the registry for context. */
    functionName?: string;

    /** Optional: Any additional context passed down from the calling layer (e.g., agent card context). */
    executionContext?: any;

    agentId?: string;
}

/**
 * Output structure expected from every function handler after execution.
 */
export interface FunctionHandlerOutput {
    /**
     * The response content formulated for the LLM.
     * This typically includes the results of the function's operation or a description of an error.
     * It should guide the LLM on what to say next to the user.
     */
    modelResponseContent: string;

    /**
     * Optional action to be triggered on the frontend UI after the function completes.
     * Examples include navigating to a URL, opening a map, or showing a confirmation dialog.
     */
    frontendAction?: FrontendAction; // Use FrontendAction from shared types

    thoughts?: ThoughtStep[]; // <<< THÊM DÒNG NÀY

}